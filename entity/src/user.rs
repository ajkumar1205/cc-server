//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

// use std::fmt::Binary;

use chrono::NaiveDateTime;
use sea_orm::{entity::prelude::*, prelude::async_trait::async_trait};
use serde::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(unique)]
    #[sea_orm(column_type = "Uuid")]
    pub uuid: Uuid,
    // #[serde(skip_serializing)]
    pub password: String,
    pub profile_pic: Option<Vec<u8>>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub is_admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    // /// Create a new ActiveModel with default values. Also used by `Default::default()`.
    // fn new() -> Self {
    //     Self {
    //         uuid: Set(Uuid::new_v4()),
    //         ..ActiveModelTrait::default()
    //     }
    // }

    // /// Will be triggered before insert / update
    // async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>
    // where
    //     C: ConnectionTrait,
    // {
    //     Ok(self)
    // }
}
